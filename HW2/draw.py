import numpy as np
import matplotlib.pyplot as plt

cnn_train_acc = np.load('./cnn/train_info/train_acc.npy')
mlp_train_acc = np.load('./mlp/train_info/train_acc.npy')

cnn_val_acc = np.load('./cnn/train_info/val_acc.npy')
mlp_val_acc = np.load('./mlp/train_info/val_acc.npy')

cnn_train_loss = np.load('./cnn/train_info/train_loss.npy')
mlp_train_loss = np.load('./mlp/train_info/train_loss.npy')

cnn_val_loss = np.load('./cnn/train_info/val_loss.npy')
mlp_val_loss = np.load('./mlp/train_info/val_loss.npy')

nonnorm_cnn_train_acc = np.load('./cnn/train_info/nonnorm_train_acc.npy')
nonnorm_mlp_train_acc = np.load('./mlp/train_info/nonnorm_train_acc.npy')

nonnorm_cnn_val_acc = np.load('./cnn/train_info/nonnorm_val_acc.npy')
nonnorm_mlp_val_acc = np.load('./mlp/train_info/nonnorm_val_acc.npy')

nonnorm_cnn_train_loss = np.load('./cnn/train_info/nonnorm_train_loss.npy')
nonnorm_mlp_train_loss = np.load('./mlp/train_info/nonnorm_train_loss.npy')

nonnorm_cnn_val_loss = np.load('./cnn/train_info/nonnorm_val_loss.npy')
nonnorm_mlp_val_loss = np.load('./mlp/train_info/nonnorm_val_loss.npy')

train_acc_1 = np.load('./cnn/train_info/dropout_0.1_train_acc.npy')
val_acc_1 = np.load('./cnn/train_info/dropout_0.1_val_acc.npy')
train_acc_2 = np.load('./cnn/train_info/dropout_0.3_train_acc.npy')
val_acc_2 = np.load('./cnn/train_info/dropout_0.3_val_acc.npy')
train_acc_3 = np.load('./cnn/train_info/dropout_0.5_train_acc.npy')
val_acc_3 = np.load('./cnn/train_info/dropout_0.5_val_acc.npy')
train_acc_4 = np.load('./cnn/train_info/dropout_0.7_train_acc.npy')
val_acc_4 = np.load('./cnn/train_info/dropout_0.7_val_acc.npy')
train_acc_5 = np.load('./cnn/train_info/dropout_0.9_train_acc.npy')
val_acc_5 = np.load('./cnn/train_info/dropout_0.9_val_acc.npy')

train_loss_1 = np.load('./cnn/train_info/dropout_0.1_train_loss.npy')
val_loss_1 = np.load('./cnn/train_info/dropout_0.1_val_loss.npy')
train_loss_2 = np.load('./cnn/train_info/dropout_0.3_train_loss.npy')
val_loss_2 = np.load('./cnn/train_info/dropout_0.3_val_loss.npy')
train_loss_3 = np.load('./cnn/train_info/dropout_0.5_train_loss.npy')
val_loss_3 = np.load('./cnn/train_info/dropout_0.5_val_loss.npy')
train_loss_4 = np.load('./cnn/train_info/dropout_0.7_train_loss.npy')
val_loss_4 = np.load('./cnn/train_info/dropout_0.7_val_loss.npy')
train_loss_5 = np.load('./cnn/train_info/dropout_0.9_train_loss.npy')
val_loss_5 = np.load('./cnn/train_info/dropout_0.9_val_loss.npy')

def average(array, steps):
	array = array.reshape(steps, -1)
	ans = np.mean(array, axis=-1)
	return ans

def drawacc():
	_mlp_train_acc = average(mlp_train_acc, 400)
	_cnn_train_acc = average(cnn_train_acc, 400)
	_mlp_val_acc = average(mlp_val_acc, 400)
	_cnn_val_acc = average(cnn_val_acc, 400)
	_mlp_train_loss = average(mlp_train_loss, 400)
	_cnn_train_loss = average(cnn_train_loss, 400)
	_mlp_val_loss = average(mlp_val_loss, 400)
	_cnn_val_loss = average(cnn_val_loss, 400)

	plt.plot(range(1,8000,20),_cnn_train_acc, label="train accuracy of CNN")
	plt.plot(range(1,8000,20),_cnn_val_acc, label="val accuracy of CNN")
	plt.plot(range(1,8000,20),_mlp_train_acc, label="train accuracy of MLP")
	plt.plot(range(1,8000,20),_mlp_val_acc, label="val accuracy of MLP")
	plt.legend()
	plt.ylim(ymax=1.0, ymin=0.2)
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("Accuracy during training and validation")
	plt.savefig("acc.png")
	plt.close()

def drawloss():
	_mlp_train_acc = average(mlp_train_acc, 400)
	_cnn_train_acc = average(cnn_train_acc, 400)
	_mlp_val_acc = average(mlp_val_acc, 400)
	_cnn_val_acc = average(cnn_val_acc, 400)

	_mlp_train_loss = average(mlp_train_loss, 400)
	_cnn_train_loss = average(cnn_train_loss, 400)
	_mlp_val_loss = average(mlp_val_loss, 400)
	_cnn_val_loss = average(cnn_val_loss, 400)

	plt.plot(range(1,8000,20),cnn_train_loss, label="train loss of cnn")
	plt.plot(range(1,8000,20),cnn_val_loss, label="valid loss of cnn")
	plt.plot(range(1,8000,20),mlp_train_loss, label="train loss of mlp")
	plt.plot(range(1,8000,20),mlp_val_loss, label="valid loss of mlp")
	plt.ylim(ymax=2.5)
	plt.legend()
	plt.xlabel("iterations")
	plt.ylabel("loss")
	plt.title("Loss during training and validation")
	plt.savefig("loss.png")

	plt.close()

def drawbncnnacc():
	_nonnorm_cnn_train_acc = average(nonnorm_cnn_train_acc, 400)
	_nonnorm_cnn_val_acc = average(nonnorm_cnn_val_acc, 400)
	_cnn_train_acc = average(cnn_train_acc, 400)
	_cnn_val_acc = average(cnn_val_acc, 400)
	plt.plot(range(1,8000,20),_cnn_train_acc, label=" BN train accuracy")
	plt.plot(range(1,8000,20),_cnn_val_acc, label="BN valid accuracy")
	plt.plot(range(1,8000,20),_nonnorm_cnn_train_acc, label="no BN train accuracy")
	plt.plot(range(1,8000,20),_nonnorm_cnn_val_acc, label="no BN valid accuracy")
	plt.legend()
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("Accuracy of CNN model")
	plt.savefig("BN_cnn_accuracy.png")
	plt.close()


def drawbnmlpacc():
	_nonnorm_mlp_train_acc = average(nonnorm_mlp_train_acc, 400)
	_nonnorm_mlp_val_acc = average(nonnorm_mlp_val_acc, 400)
	_mlp_train_acc = average(mlp_train_acc, 400)
	_mlp_val_acc = average(mlp_val_acc, 400)
	plt.plot(range(1,8000,20),_mlp_train_acc, label=" BN train accuracy")
	plt.plot(range(1,8000,20),_mlp_val_acc, label="BN valid accuracy")
	plt.plot(range(1,8000,20),_nonnorm_mlp_train_acc, label="no BN train accuracy")
	plt.plot(range(1,8000,20),_nonnorm_mlp_val_acc, label="no BN valid accuracy")
	plt.legend()
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("Accuracy of MLP model")
	plt.savefig("BN_mlp_accuracy.png")
	plt.close()

def drawbncnnloss():
	_nonnorm_cnn_train_loss = average(nonnorm_cnn_train_loss, 400)
	_nonnorm_cnn_val_loss = average(nonnorm_cnn_val_loss, 400)
	_cnn_train_loss = average(cnn_train_loss, 400)
	_cnn_val_loss = average(cnn_val_loss, 400)
	plt.plot(range(1,8000,20),_cnn_train_loss, label=" BN train loss")
	plt.plot(range(1,8000,20),_cnn_val_loss, label="BN valid loss")
	plt.plot(range(1,8000,20),_nonnorm_cnn_train_loss, label="no BN train loss")
	plt.plot(range(1,8000,20),_nonnorm_cnn_val_loss, label="no BN valid loss")
	plt.legend()
	plt.xlabel("iterations")
	plt.ylabel("loss")
	plt.title("Loss of CNN model")
	plt.savefig("BN_cnn_loss.png")
	plt.close()

def drawbnmlploss():
	_nonnorm_mlp_train_loss = average(nonnorm_mlp_train_loss, 400)
	_nonnorm_mlp_val_loss = average(nonnorm_mlp_val_loss, 400)
	_mlp_train_loss = average(mlp_train_loss, 400)
	_mlp_val_loss = average(mlp_val_loss, 400)
	plt.plot(range(1,8000,20),_mlp_train_loss, label=" BN train loss")
	plt.plot(range(1,8000,20),_mlp_val_loss, label="BN valid loss")
	plt.plot(range(1,8000,20),_nonnorm_mlp_train_loss, label="no BN train loss")
	plt.plot(range(1,8000,20),_nonnorm_mlp_val_loss, label="no BN valid loss")
	plt.legend()
	plt.xlabel("iterations")
	plt.ylabel("loss")
	plt.title("Loss of MLP model")
	plt.savefig("BN_mlp_loss.png")
	plt.close()

def drawcnnacc():
	plt.plot(range(1, 8000, 160), cnn_train_acc, label="train accuracy of cnn")
	plt.plot(range(1, 8000, 160), cnn_val_acc, label="val accuracy of cnn")
	plt.legend(loc='upper left')
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("CNN model's accuracy during training and validation")
	plt.savefig("CNN_acc.png")
	plt.close()

def drawmlpacc():
	plt.plot(range(1, 8000, 160), mlp_train_acc, label="train accuracy of mlp")
	plt.plot(range(1, 8000, 160), mlp_val_acc, label="val accuracy of mlp")
	plt.legend(loc='upper left')
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("MLP model's accuracy during training and validation")
	plt.savefig("MLP_acc.png")
	plt.close()

def drawcnnloss():
	plt.plot(range(1, 8000, 160), cnn_train_loss, label="train loss of cnn")
	plt.plot(range(1, 8000, 160), cnn_val_loss, label="val loss of cnn")
	plt.legend(loc='lower left')
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("CNN model's loss during training and validation")
	plt.savefig("CNN_loss.png")
	plt.close()

def drawmlploss():
	plt.plot(range(1, 8000, 160), mlp_train_acc, label="train loss of mlp")
	plt.plot(range(1, 8000, 160), mlp_val_acc, label="val loss of mlp")
	plt.legend(loc='upper left')
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("MLP model's loss during training and validation")
	plt.savefig("MLP_loss.png")
	plt.close()

def drawdropacc():
	_train_acc_1 = average(train_acc_1, 400)
	_val_acc_1 = average(val_acc_1, 400)
	_train_acc_2 = average(train_acc_2, 400)
	_val_acc_2 = average(val_acc_2, 400)
	_train_acc_3 = average(train_acc_3, 400)
	_val_acc_3 = average(val_acc_3, 400)
	_train_acc_4 = average(train_acc_4, 400)
	_val_acc_4 = average(val_acc_4, 400)
	_train_acc_5 = average(train_acc_5, 400)
	_val_acc_5 = average(val_acc_5, 400)
	plt.plot(range(1, 8000, 20), _train_acc_1, label="0.1 train acc")
	plt.plot(range(1, 8000, 20), _val_acc_1, label="0.1 val acc")
	plt.plot(range(1, 8000, 20), _train_acc_2, label="0.3 train acc")
	plt.plot(range(1, 8000, 20), _val_acc_2, label="0.3 val acc")
	plt.plot(range(1, 8000, 20), _train_acc_3, label="0.5 train acc")
	plt.plot(range(1, 8000, 20), _val_acc_3, label="0.5 val acc")
	plt.plot(range(1, 8000, 20), _train_acc_4, label="0.7 train acc")
	plt.plot(range(1, 8000, 20), _val_acc_4, label="0.7 val acc")
	plt.plot(range(1, 8000, 20), _train_acc_5, label="0.9 train acc")
	plt.plot(range(1, 8000, 20), _val_acc_5, label="0.9 val acc")
	plt.legend(ncol=2)
	plt.ylim(ymin=0.3)
	plt.xlabel("iterations")
	plt.ylabel("accuracy")
	plt.title("Accuracy of all dropout rate")
	plt.savefig("drop_acc.png")
	plt.close()

def drawdroploss():
	_train_loss_1 = average(train_loss_1, 400)
	_val_loss_1 = average(val_loss_1, 400)
	_train_loss_2 = average(train_loss_2, 400)
	_val_loss_2 = average(val_loss_2, 400)
	_train_loss_3 = average(train_loss_3, 400)
	_val_loss_3 = average(val_loss_3, 400)
	_train_loss_4 = average(train_loss_4, 400)
	_val_loss_4 = average(val_loss_4, 400)
	_train_loss_5 = average(train_loss_5, 400)
	_val_loss_5 = average(val_loss_5, 400)
	plt.plot(range(1, 8000, 20), _train_loss_1, label="0.1 train loss")
	plt.plot(range(1, 8000, 20), _val_loss_1, label="0.1 val loss")
	plt.plot(range(1, 8000, 20), _train_loss_2, label="0.3 train loss")
	plt.plot(range(1, 8000, 20), _val_loss_2, label="0.3 val loss")
	plt.plot(range(1, 8000, 20), _train_loss_3, label="0.5 train loss")
	plt.plot(range(1, 8000, 20), _val_loss_3, label="0.5 val loss")
	plt.plot(range(1, 8000, 20), _train_loss_4, label="0.7 train loss")
	plt.plot(range(1, 8000, 20), _val_loss_4, label="0.7 val loss")
	plt.plot(range(1, 8000, 20), _train_loss_5, label="0.9 train loss")
	plt.plot(range(1, 8000, 20), _val_loss_5, label="0.9 val loss")
	plt.legend(ncol=2)
	plt.xlabel("iterations")
	plt.ylabel("Loss")
	plt.title("Loss of all dropout rate")
	plt.savefig("drop_loss.png")
	plt.close()

drawdropacc()
drawdroploss()
